/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wordchecker;

import common.db.DBUtil;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import worddb.BioTermTable;
import worddb.CityTable;
import worddb.ProperNounTable;
import worddb.WordTable;
import worddb.tools.DicImporter;

/**
 *
 * @author iychoi
 */
public class DictionaryImportPopup extends javax.swing.JDialog {

    private File workingParentDir;
    
    /**
     * Creates new form DictionaryImportPopup
     */
    public DictionaryImportPopup(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        recountDicWords();
    }
    
    private void recountDicWords() {
        try {
            Connection conn = DBUtil.getConnection();
            int cntWord = WordTable.getRegisteredWordCount(conn);
            int cntCity = CityTable.getRegisteredWordCount(conn);
            int cntBioTerm = BioTermTable.getRegisteredWordCount(conn);
            int cntProperNoun = ProperNounTable.getRegisteredWordCount(conn);
            conn.close();
            
            this.lblCountGeneralWords.setText(cntWord + " words in DB");
            this.lblCountCityNames.setText(cntCity + " words in DB");
            this.lblCountBioTerms.setText(cntBioTerm + " words in DB");
            this.lblCountProperNouns.setText(cntProperNoun + " words in DB");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGeneralWords = new javax.swing.JLabel();
        btnGeneralWordsImport = new javax.swing.JButton();
        lblCountGeneralWords = new javax.swing.JLabel();
        lblCityNames = new javax.swing.JLabel();
        btnCityNamesImport = new javax.swing.JButton();
        lblCountCityNames = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        lblBioTerms = new javax.swing.JLabel();
        btnBioTermsImport = new javax.swing.JButton();
        lblCountBioTerms = new javax.swing.JLabel();
        lblProperNouns = new javax.swing.JLabel();
        btnProperNounsImport = new javax.swing.JButton();
        lblCountProperNouns = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblGeneralWords.setText("General Words");

        btnGeneralWordsImport.setText("Import");
        btnGeneralWordsImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneralWordsImportActionPerformed(evt);
            }
        });

        lblCountGeneralWords.setText("0");

        lblCityNames.setText("City Names");

        btnCityNamesImport.setText("Import");
        btnCityNamesImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityNamesImportActionPerformed(evt);
            }
        });

        lblCountCityNames.setText("0");

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        lblBioTerms.setText("Bio Terms");

        btnBioTermsImport.setText("Import");
        btnBioTermsImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBioTermsImportActionPerformed(evt);
            }
        });

        lblCountBioTerms.setText("0");

        lblProperNouns.setText("Proper Nouns");

        btnProperNounsImport.setText("Import");
        btnProperNounsImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProperNounsImportActionPerformed(evt);
            }
        });

        lblCountProperNouns.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGeneralWords)
                            .addComponent(lblCityNames, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGeneralWordsImport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCountGeneralWords, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCityNamesImport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCountCityNames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBioTerms, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnBioTermsImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCountBioTerms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblProperNouns, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProperNounsImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCountProperNouns, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGeneralWords)
                    .addComponent(btnGeneralWordsImport)
                    .addComponent(lblCountGeneralWords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCityNames)
                    .addComponent(btnCityNamesImport)
                    .addComponent(lblCountCityNames))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBioTerms)
                    .addComponent(btnBioTermsImport)
                    .addComponent(lblCountBioTerms))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProperNouns)
                    .addComponent(btnProperNounsImport)
                    .addComponent(lblCountProperNouns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGeneralWordsImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneralWordsImportActionPerformed
        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("dictionary file", "dic");
        fc.addChoosableFileFilter(filter);

        if(this.workingParentDir != null) {
            fc.setCurrentDirectory(this.workingParentDir);
        }

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            if(file.getName().toLowerCase().endsWith(".dic")) {
                try {
                    DicImporter importer = new DicImporter(file);
                    
                    Connection conn = DBUtil.getConnection();
                    importer.loadToWordTable(conn, this);
                    conn.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "You can select only dic files");
            }
        }
        recountDicWords();
    }//GEN-LAST:event_btnGeneralWordsImportActionPerformed

    private void btnCityNamesImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityNamesImportActionPerformed
        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("dictionary file", "dic");
        fc.addChoosableFileFilter(filter);

        if(this.workingParentDir != null) {
            fc.setCurrentDirectory(this.workingParentDir);
        }

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            if(file.getName().toLowerCase().endsWith(".dic")) {
                try {
                    DicImporter importer = new DicImporter(file);
                    
                    Connection conn = DBUtil.getConnection();
                    importer.loadToCityTable(conn, this);
                    conn.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "You can select only dic files");
            }
        }
        recountDicWords();
    }//GEN-LAST:event_btnCityNamesImportActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnBioTermsImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBioTermsImportActionPerformed
        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("dictionary file", "dic");
        fc.addChoosableFileFilter(filter);

        if(this.workingParentDir != null) {
            fc.setCurrentDirectory(this.workingParentDir);
        }

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            if(file.getName().toLowerCase().endsWith(".dic")) {
                try {
                    DicImporter importer = new DicImporter(file);
                    
                    Connection conn = DBUtil.getConnection();
                    importer.loadToBioTermTable(conn, this);
                    conn.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "You can select only dic files");
            }
        }
        recountDicWords();
    }//GEN-LAST:event_btnBioTermsImportActionPerformed

    private void btnProperNounsImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProperNounsImportActionPerformed
        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("dictionary file", "dic");
        fc.addChoosableFileFilter(filter);

        if(this.workingParentDir != null) {
            fc.setCurrentDirectory(this.workingParentDir);
        }

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            if(file.getName().toLowerCase().endsWith(".dic")) {
                try {
                    DicImporter importer = new DicImporter(file);
                    
                    Connection conn = DBUtil.getConnection();
                    importer.loadToProperNounTable(conn, this);
                    conn.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "You can select only dic files");
            }
        }
        recountDicWords();
    }//GEN-LAST:event_btnProperNounsImportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DictionaryImportPopup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DictionaryImportPopup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DictionaryImportPopup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DictionaryImportPopup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DictionaryImportPopup dialog = new DictionaryImportPopup(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBioTermsImport;
    private javax.swing.JButton btnCityNamesImport;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGeneralWordsImport;
    private javax.swing.JButton btnProperNounsImport;
    private javax.swing.JLabel lblBioTerms;
    private javax.swing.JLabel lblCityNames;
    private javax.swing.JLabel lblCountBioTerms;
    private javax.swing.JLabel lblCountCityNames;
    private javax.swing.JLabel lblCountGeneralWords;
    private javax.swing.JLabel lblCountProperNouns;
    private javax.swing.JLabel lblGeneralWords;
    private javax.swing.JLabel lblProperNouns;
    // End of variables declaration//GEN-END:variables
}
